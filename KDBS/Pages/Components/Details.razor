@using KDBS.Data
@using KDBS.Models
@using KDBS.Services.CategoryService
@using KDBS.Services.JobService
@using KDBS.Services.CompanyService
@using KDBS.Services.GoodsService
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity

@inject IJSRuntime JS
@inject IJobService _jobDb
@inject ICompanyService _companyDb
@inject IGoodsService _goodsDb
@inject ICategoryService _categoryDb
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager NavManager

<CardHeaderArea HeaderText="@job.JobTitle" OnClickCallback="@OnClickCallback"></CardHeaderArea>

<div class="label label-text text-xl pl-0">
    @jobModel?.Company?.Name
</div>

<div class="flex flex-wrap">
    <div class="label label-text pl-0">
        <div class="badge badge-secondary">
            @job.Salary kr
        </div>
    </div>

    @foreach (var category in job.Categories ?? new List<Category>())
    {
        @if (jobModel?.CategoryId == category.CategoryId)
        {
            <div class="label label-text ml-2">
                <div class="badge badge-primary">
                    @category.Title
                </div>
            </div>

        }
    }

    <div class="label label-text ml-2">
        @foreach (var good in job.Goods ?? new List<Goods>())
        {
            @if (good.IsSelected)
            {
                <div class="badge badge-accent mr-1">
                    @good.Title
                </div>
            }
        }
    </div>
</div>

<div class="prose">
    @((MarkupString)@job.JobContent)
</div>

<div>
    @if (job.LinkToCompany != null && job.LinkToCompany != "")
    {
        <a href="@job.LinkToCompany" target="_blank" class="btn btn-secondary">Ansøg her</a>
    }
</div>

@code {
    [Parameter]
    public string JobId { get; set; }
    [Parameter]
    public EventCallback OnClickCallback { get; set; }

    private Job job = new Job();
    private JobModel jobModel;

    protected override async Task OnInitializedAsync()
    {
        if (JobId == null)
        {
            return;
        }
        jobModel = await _jobDb.GetJob(JobId);
        var goods = await _goodsDb.GetGoods();
        var category = await _categoryDb.GetCategories();

        job = new Job() { JobTitle = jobModel.Title, JobContent = jobModel.Content, CategoryId = jobModel.CategoryId, Salary = jobModel.Salary, LinkToCompany = jobModel.LinkToCompany };

        job.Goods = goods.Select(g => new Goods()
            {
                GoodsId = g.GoodsId,
                Title = g.Title,
                IsSelected = jobModel.Goods?.Any(jg => jg.GoodsId == g.GoodsId) ?? false
            }).ToList();


        job.Categories = category.Select(c => new Category()
            {
                CategoryId = c.CategoryId,
                Title = c.Title
            }).ToList();

    }
}