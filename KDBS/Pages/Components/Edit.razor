@attribute [Authorize(Roles = "Admin, Recruiter")]

@using KDBS.Data
@using KDBS.Models
@using KDBS.Services.CategoryService
@using KDBS.Services.JobService
@using KDBS.Services.CompanyService
@using KDBS.Services.GoodsService
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity

@inject IJSRuntime JS
@inject IJobService _jobDb
@inject ICompanyService _companyDb
@inject IGoodsService _goodsDb
@inject ICategoryService _categoryDb
@inject AuthenticationStateProvider _authenticationStateProvider
@inject UserManager<UserModel> _userManager
@inject NavigationManager NavManager

<CardHeaderArea HeaderText="@("Edit job opslag for id: " + @jobModel?.Title)" OnClickCallback="@OnClosePressed"></CardHeaderArea>

<EditForm Model="@job" OnValidSubmit="@OnEditJob">
    <JobFormView buttonText="Opdater" job="@job"></JobFormView>
</EditForm>

@code {
    [Parameter]
    public string JobId { get; set; }
    [Parameter]
    public EventCallback OnClickCallback { get; set; }

    private Job job = new Job();
    private JobModel jobModel;
    private UserModel user = new UserModel();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initTextField");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        jobModel = await _jobDb.GetJob(JobId);
        var goods = await _goodsDb.GetGoods();
        var category = await _categoryDb.GetCategories();

        job = new Job() { JobTitle = jobModel.Title, JobContent = jobModel.Content, CategoryId = jobModel.CategoryId, Salary = jobModel.Salary };

        job.Goods = goods.Select(g => new Goods()
            {
                GoodsId = g.GoodsId,
                Title = g.Title,
                IsSelected = jobModel.Goods?.Any(jg => jg.GoodsId == g.GoodsId) ?? false
            }).ToList();


        job.Categories = category.Select(c => new Category()
            {
                CategoryId = c.CategoryId,
                Title = c.Title
            }).ToList();

    }

    private async Task OnClosePressed()
    {
        await OnClickCallback.InvokeAsync();
    }

    private async Task OnEditJob()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var claim = authState.User;

        user = await _userManager.GetUserAsync(claim);
        user.Company = await _companyDb.GetCompanyByUser(user.Id);

        var selectedGoods = await _goodsDb.GetGoods(job.Goods.Where(g => g.IsSelected).Select(r => r.GoodsId).ToList());

        jobModel.Title = job.JobTitle;
        jobModel.Salary = job.Salary;
        jobModel.Content = job.JobContent ?? "This should be filled";
        jobModel.Edited = DateTime.Now;
        jobModel.CategoryId = job.CategoryId;
        jobModel.Goods = selectedGoods;

        await _jobDb.EditJob(jobModel);
        await OnClickCallback.InvokeAsync();
    }
}