@page "/"

@using Microsoft.Extensions.Configuration
@using KDBS.Services.JobService
@using KDBS.Models
@using KDBS.Models.Events
@using KDBS.Data
@using KDBS.Pages.Components.JobPage
@implements IDisposable
@inject IJSRuntime _js
@inject IConfiguration _configuration
@inject IJobService _jobService

<div class="w-full, h-full overflow-hidden relative">
    <JobFilter OnFilterChanged="OnFilterChanged"></JobFilter>
    <div id="map" class="w-full, h-full"></div>
    @if (!ReadMoreIsActive)
    {
        <div class="absolute job-popup card shadow-2xl bg-base-100" style="@_overlayStyle">
            <div class="card-body max-w-xs">
                <h2 class="card-title">@_selectedJob?.Title</h2>
                <div class="prose overflow-hidden max-h-40">
                    @_selectedContent
                </div>
                <button @onclick="@OnReadMoreClick" class="btn btn-primary mt-5">Læs mere</button>
                @if (HasNavigation)
                {
                    <div class="mt-5 flex justify-between">
                        <button @onclick="@Previous" class="btn-xs p-0">
                            <ion-icon name="chevron-back-outline"></ion-icon>
                        </button>
                        <label>@_pageNumbers.CurrentPage / @_pageNumbers.TotalPages jobs</label>
                        <button @onclick="@Next" class="btn-xs p-0">
                            <ion-icon name="chevron-forward-outline"></ion-icon>
                        </button>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <CardOverlay>
            <Details JobId="@_selectedJob?.JobId" OnClickCallback="@OnReadMoreClick"></Details>
        </CardOverlay>
    }
</div>

@code {
    private bool HasNavigation => _currentPin != null && _currentPin.Jobs.Count > 1;
    private bool ReadMoreIsActive;

    private DotNetObjectReference<Index>? _objectReference;
    private List<PreviewPoint> _previewPoints = new();

    private string _overlayStyle = "display: none;";

    private int _currentPreviewIndex;
    private PreviewPoint? _currentPin;

    private JobModel? _selectedJob;
    private MarkupString _selectedContent = (MarkupString)"";
    private readonly Pagination _pageNumbers = new() { CurrentPage = 1, TotalPages = 0 };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var key = _configuration.GetValue<string>("BingMaps");
            _objectReference = DotNetObjectReference.Create(this);

            await _js.InvokeVoidAsync("loadBingMap", key, _objectReference);
            await LoadPins();
        }
    }

    private void OnReadMoreClick()
    {
        ReadMoreIsActive = !ReadMoreIsActive;
    }

    [JSInvokable] public async Task ClickedOnPin(PinClickEvent pinClickEvent)
    {
        var previewPoint = _previewPoints.FirstOrDefault(p => p.Id == pinClickEvent.Id);

        if (previewPoint == null)
        {
            return;
        }

        _currentPreviewIndex = 0;
        _currentPin = previewPoint;
        _pageNumbers.CurrentPage = 1;

        await LoadCurrentJob();
        ShowPopup(pinClickEvent.PageX, pinClickEvent.PageY, pinClickEvent.ScreenWidth, pinClickEvent.ScreenHeight);
        StateHasChanged();
    }

    [JSInvokable] public void HidePopup()
    {
        _overlayStyle = "display: none;";
        StateHasChanged();
    }

    private async Task OnFilterChanged(FilterChangedEvent changedEvent)
    {
        await LoadPins(changedEvent.SearchQuery, changedEvent.Salary, changedEvent.Categories, changedEvent.Goods);
    }

    private async Task LoadPins(string? searchQuery = null, int? salary = null, List<string>? categories = null, List<string>? goods = null)
    {
        var jobs = await _jobService.GetJobs(searchQuery, salary, categories, goods);

        var pins = jobs
            .GroupBy(j => $@"{j.Company.Latitude}{j.Company.Longitude}")
            .Select(j => new PreviewPoint
            {
                Id = Guid.NewGuid().ToString(),
                Latitude = j.First().Company.Latitude,
                Longitude = j.First().Company.Longitude,
                Jobs = j.Select(job => job.JobId).ToList()
            }).ToList();

        _previewPoints = pins;
        _pageNumbers.TotalPages = jobs.Count();
        await _js.InvokeVoidAsync("addPins", pins);
    }

    private void ShowPopup(int x, int y, int width, int height)
    {
        var xOffset = x;
        var yOffset = y;

        if (y - 300 < 0)
        {
            yOffset = 300;
        }

        _overlayStyle = $"left: {xOffset}px; top: {yOffset}px";
    }

    private async Task LoadCurrentJob()
    {
        var jobId = _currentPin?.Jobs[_currentPreviewIndex];
        _pageNumbers.TotalPages = _currentPin?.Jobs.Count() ?? 0;

        if (jobId == null)
        {
            HidePopup();
            return;
        }

        JobModel? job = null;
        try
        {
            job = await _jobService.GetJob(jobId);
        }
        catch (Exception e)
        {
            HidePopup();
            return;
        }

        _selectedJob = job;
        var jobContent = (MarkupString)job.Content;
        _selectedContent = jobContent;
    }

    private async Task Next()
    {
        if (_currentPin == null) return;

        var nextIndex = _currentPreviewIndex + 1;
        if (_currentPin.Jobs.Count == nextIndex) nextIndex = 0;

        _currentPreviewIndex = nextIndex;
        _pageNumbers.CurrentPage = nextIndex + 1;
        await LoadCurrentJob();
    }

    private async Task Previous()
    {
        if (_currentPin == null) return;

        var nextIndex = _currentPreviewIndex - 1;
        if (nextIndex < 0) nextIndex = _currentPin.Jobs.Count - 1;

        _currentPreviewIndex = nextIndex;
        _pageNumbers.CurrentPage = nextIndex + 1;
        await LoadCurrentJob();
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
        if (_objectReference != null)
        {
            _objectReference.Dispose();
        }
    }
}