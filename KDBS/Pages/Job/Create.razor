@page "/job/create"
@attribute [Authorize]

@using KDBS.Data
@using KDBS.Models
@using KDBS.Services.CategoryService
@using KDBS.Services.JobService
@using KDBS.Services.CompanyService
@using KDBS.Services.GoodsService
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity

@inject IJSRuntime JS
@inject IJobService _jobDb
@inject ICompanyService _companyDb
@inject IGoodsService _goodsDb
@inject ICategoryService _categoryDb
@inject AuthenticationStateProvider _authenticationStateProvider
@inject UserManager<UserModel> _userManager
@inject NavigationManager NavManager

<div class="w-full h-full flex justify-center items-center">
    <div class="w-full max-w-2xl">
        <h1 class="text-3xl font-bold mb-6">Opret job opslag</h1>
        <div class="card flex-shrink-0 w-full shadow-2xl bg-base-100">
            <div class="card-body">

                <EditForm Model="@job" OnValidSubmit="@OnCreateJob">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <label class="form-control">
                        <p class="label label-text">
                            Title
                        </p>
                        <InputText id="title" class="input input-bordered" @bind-Value="job.JobTitle" />
                    </label>
                    <label class="form-control">
                        <p class="label label-text">
                            Løn
                        </p>
                        <InputNumber id="salary" class="input input-bordered" @bind-Value="job.Salary" />
                    </label>
                    <label class="form-control">
                        <p class="label label-text">
                            Goder
                        </p>
                        @foreach (var good in job.Goods ?? new List<Goods>())
                        {
                            <p>
                                @good.Title:
                            </p>
                            <InputCheckbox id="@good.GoodsId" class="" @bind-Value="@good.IsSelected" />
                        }
                    </label>
                    <label class="form-control">
                        <p class="label label-text">
                            Kategorier
                        </p>
                        <InputSelect id="category" class="input input-bordered" @bind-Value="@job.CategoryId">
                            @foreach (var category in job.Categories ?? new List<Category>())
                            {
                                <option value="@category.CategoryId">@category.Title</option>
                            }
                        </InputSelect>
                    </label>
                    <label class="form-control">
                        <p class="label label-text">
                            Beskrivelse
                        </p>
                        <InputTextArea id="mytextarea" class="input input-bordered" @bind-Value="job.JobContent" />
                    </label>
                    <div class="form-control mt-6">
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private Job job = new Job();
    private UserModel user = new UserModel();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initTextField");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        job.Goods = (await _goodsDb.GetGoods()).Select(g => new Goods() { GoodsId = g.GoodsId, Title = g.Title, IsSelected = false }).ToList();
        job.Categories = (await _categoryDb.GetCategories()).Select(c => new Category() { CategoryId = c.CategoryId, Title = c.Title }).ToList();
    }

    private async Task OnCreateJob()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var claim = authState.User;

        user = await _userManager.GetUserAsync(claim);
        user.Company = await _companyDb.GetCompanyByUser(user.Id);

        var selectedGoods = await _goodsDb.GetGoods(job.Goods.Where(g => g.IsSelected).Select(r => r.GoodsId).ToList());

        JobModel j = new JobModel()
            {
                Title = job.JobTitle,
                Salary = job.Salary,
                Content = job.JobContent ?? "This should be filled",
                Added = DateTime.Now,
                Edited = DateTime.Now,
                CompanyId = user.Company.CompanyId,
                CategoryId = job.CategoryId,
                Goods = selectedGoods
            };

        await _jobDb.CreateJob(j);
        NavManager.NavigateTo("/job");
    }
}