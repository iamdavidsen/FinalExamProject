@page "/job"
@using KDBS.Services.JobService
@using KDBS.Services.CompanyService
@using KDBS.Services.GoodsService
@using KDBS.Services.CategoryService
@using KDBS.Data
@using KDBS.Pages.Components.JobPage

@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity

@attribute [Authorize(Roles = "Admin, Recruiter")]

@inject IJSRuntime JS
@inject IJobService _jobDb
@inject ICompanyService _companyDb
@inject IGoodsService _goodsDb
@inject ICategoryService _categoryDb
@inject AuthenticationStateProvider _authenticationStateProvider
@inject UserManager<UserModel> _userManager


<div class="w-full h-full flex justify-center items-center relative">
    <div class="w-full max-w-max">
        <h1 class="text-3xl font-bold mb-6">JobList</h1>
        <div class="card flex-shrink-0 w-full shadow-2xl bg-base-100">
            <div class="card-body">
                <button @onclick="@OnCreateJobClick" class="btn btn-ghost btn-sm rounded-btn mb-3">Opret jobopslag</button>
                <table class="table w-full table-zebra">
                    <thead>
                    <tr>
                        <th class="text-center">Title</th>
                        <th class="text-center">Oprettet</th>
                        <th class="text-center">Redigeret</th>
                        <th class="text-center">Handlinger</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var item in job)
                    {
                        <tr>
                            <td>
                                <button @onclick="@(e => OnReadMoreClick(item.JobId))" class="btn btn-ghost btn-sm rounded-btn">@item.Title</button>
                            </td>
                            <td>@item.Added</td>
                            <td>@item.Edited</td>
                            <td>
                                <button @onclick="@(e => OnEditJobClick(item.JobId))" class="btn btn-ghost btn-sm rounded-btn">Rediger</button>
                                <button @onclick="@(e => OnDeleteJob(item.JobId))" class="btn btn-ghost btn-sm rounded-btn">Slet</button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    @if (ShowMoreInfo)
    {
        <CardOverlay>
            <Details JobId="@_jobId" OnClickCallback="@OnHideMoreInfo"></Details>
        </CardOverlay>
    }
    @if (ShowCreateJob)
    {
        <CardOverlay>
            <Create OnClickCallback="@OnCreateJobCloseClick"></Create>
        </CardOverlay>
    }
    @if (ShowEditJob)
    {
        <CardOverlay>
            <Edit JobId="@_jobId" OnClickCallback="@OnEditJobCloseClick"></Edit>
        </CardOverlay>
    }
</div>


@code {
    private List<JobModel> job = new();
    private UserModel user = new();
    private string _jobId = "";

    private bool ShowMoreInfo;
    private bool ShowCreateJob;
    private bool ShowEditJob;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var claim = authState.User;

        user = await _userManager.GetUserAsync(claim);
        user.Company = await _companyDb.GetCompanyByUser(user.Id);

        var isAdmin = await _userManager.IsInRoleAsync(user, "Admin");
        if (isAdmin)
        {
            job = await _jobDb.GetJobs();
        }
        else
        {
            job = await _jobDb.GetCompanyJobs(user.Company.CompanyId);
        }
    }

    private void OnDeleteJob(string jobId)
    {
        _jobDb.DeleteJob(jobId);
        job = job.Where(j => j.JobId != jobId).ToList();
    }

    // Edit job clicks
    private void OnEditJobClick(string jobId)
    {
        ShowEditJob = true;
        _jobId = jobId;
    }

    private void OnEditJobCloseClick()
    {
        ShowEditJob = false;
        _jobId = "";
    }

    // Create job clicks
    private void OnCreateJobClick()
    {
        ShowCreateJob = true;
    }
    private void OnCreateJobCloseClick(JobModel? j)
    {
        ShowCreateJob = false;
        if (j != null)
        {
            job.Add(j);
        }
    }

    // Read more clicks
    private void OnReadMoreClick(string jobId)
    {
        ShowMoreInfo = true;
        _jobId = jobId;
    }

    private void OnHideMoreInfo()
    {
        ShowMoreInfo = false;
        _jobId = "";
    }
}