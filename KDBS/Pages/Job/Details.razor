@page "/job/details/{jobid}"
@attribute [Authorize(Roles = "Admin, Recruiter")]

@using KDBS.Data
@using KDBS.Models
@using KDBS.Services.CategoryService
@using KDBS.Services.JobService
@using KDBS.Services.CompanyService
@using KDBS.Services.GoodsService
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity

@inject IJSRuntime JS
@inject IJobService _jobDb
@inject ICompanyService _companyDb
@inject IGoodsService _goodsDb
@inject ICategoryService _categoryDb
@inject AuthenticationStateProvider _authenticationStateProvider
@inject UserManager<UserModel> _userManager
@inject NavigationManager NavManager

<div class="w-full h-full flex justify-center items-center">
    <div class="w-full max-w-2xl">
        <h1 class="text-3xl font-bold mb-6">@job.JobTitle</h1>
        <div class="card flex-shrink-0 w-full shadow-2xl bg-base-100">
            <div class="card-body">
                <label class="form-control">
                    <p class="label label-text">
                        @job.JobTitle
                    </p>
                </label>
                <label class="form-control">
                    <p class="label label-text">
                        @jobModel?.Company?.Name
                    </p>
                </label>
                <label class="form-control">
                    <p class="label label-text">
                        Løn: @job.Salary
                    </p>
                </label>
                <label class="form-control">
                    <p class="label label-text">
                        Goder:
                        @foreach (var good in job.Goods ?? new List<Goods>())
                        {
                            @if (good.IsSelected)
                            {
                                @good.Title
                            }
                        }
                    </p>
                </label>
                <label class="form-control">
                    <p class="label label-text">
                        Kategori:
                        @foreach (var category in job.Categories ?? new List<Category>())
                        {
                            @if (jobModel.CategoryId == category.CategoryId)
                                @category.Title
                        }
                    </p>
                </label>
                <label class="form-control">
                    <p class="label label-text">
                        Beskrivelse:
                        @job.JobContent
                    </p>
                </label>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string JobId { get; set; }

    private Job job = new Job();
    private JobModel jobModel;
    private UserModel user = new UserModel();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initTextField");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (JobId == null)
        {
            return;
        }
        jobModel = await _jobDb.GetJob(JobId);
        var goods = await _goodsDb.GetGoods();
        var category = await _categoryDb.GetCategories();

        job = new Job() { JobTitle = jobModel.Title, JobContent = jobModel.Content, CategoryId = jobModel.CategoryId, Salary = jobModel.Salary };

        job.Goods = goods.Select(g => new Goods()
            {
                GoodsId = g.GoodsId,
                Title = g.Title,
                IsSelected = jobModel.Goods?.Any(jg => jg.GoodsId == g.GoodsId) ?? false
            }).ToList();


        job.Categories = category.Select(c => new Category()
            {
                CategoryId = c.CategoryId,
                Title = c.Title
            }).ToList();

    }

    private async Task OnCreateJob()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var claim = authState.User;

        user = await _userManager.GetUserAsync(claim);
        user.Company = await _companyDb.GetCompanyByUser(user.Id);

        var selectedGoods = await _goodsDb.GetGoods(job.Goods.Where(g => g.IsSelected).Select(r => r.GoodsId).ToList());

        jobModel.Title = job.JobTitle;
        jobModel.Salary = job.Salary;
        jobModel.Content = job.JobContent ?? "This should be filled";
        jobModel.Edited = DateTime.Now;
        jobModel.CategoryId = job.CategoryId;
        jobModel.Goods = selectedGoods;

        await _jobDb.EditJob(jobModel);
        NavManager.NavigateTo("/job");
    }
}